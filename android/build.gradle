// each of the version numbers must be 0-99
def versionMajor = 1
def versionMinor = 5 // minor feature releases
def versionPatch = 3 // This should be bumped for hot fixes

// Double check the versioning
for (versionPart in [versionPatch, versionMinor, versionMajor]) {
    assert 0 <= versionPart
    assert versionPart <= 99
}


buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'robolectric'

repositories {
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18

        applicationId "org.mozilla.mozstumbler"

        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "boolean", "ROBOLECTRIC", "false"
        buildConfigField "String", "MOZILLA_API_KEY", "\"\""
        buildConfigField "String", "TILE_SERVER_URL", "\"\""

        buildConfigField "boolean", "LABEL_MAP_TILES", "false"

        buildConfigField "boolean", "GITHUB", "false"
        buildConfigField "boolean", "PLAYSTORE", "false"
        buildConfigField "boolean", "FDROID", "false"

        // Crash report settings
        buildConfigField "String", "ACRA_URI", "\"http://ec2-54-172-135-65.compute-1.amazonaws.com/acra-stumbler/_design/acra-storage/_update/report\""
        buildConfigField "String", "ACRA_USER", "\"nospam\""
        buildConfigField "String", "ACRA_PASS", "\"4ok3bsWs509i\""
    }

    signingConfigs {
        release
    }

    productFlavors {
        github {
            buildConfigField "String", "MOZILLA_API_KEY", getMozillaApiKey('github')
            buildConfigField "String", "TILE_SERVER_URL", getTileServerUrl('github')
            buildConfigField "boolean", "GITHUB", "true"
        }

        playstore {
            buildConfigField "String", "MOZILLA_API_KEY", getMozillaApiKey('playstore')
            buildConfigField "String", "TILE_SERVER_URL", getTileServerUrl('playstore')
            buildConfigField "boolean", "PLAYSTORE", "true"
        }

        fdroid {
            buildConfigField "String", "MOZILLA_API_KEY", getMozillaApiKey('fdroid')
            buildConfigField "String", "TILE_SERVER_URL", getTileServerUrl('fdroid')
            buildConfigField "boolean", "FDROID", "true"
        }
    }

    buildTypes {
        debug {
            jniDebuggable true

            // set this to false if you want your debug builds to have
            // standard unlabelled tiles.
            buildConfigField "boolean", "LABEL_MAP_TILES", "false"
        }

        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }


        unittest.initWith(buildTypes.debug)
        unittest {
            buildConfigField "boolean", "ROBOLECTRIC", "true"
        }

    }

    sourceSets {
        androidTest.setRoot('src/test')
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }

}


dependencies {
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.4'

    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.4'

    compile 'com.crankycoder:SimpleKML:1.0'

    compile 'org.slf4j:slf4j-android:1.7.7'

    // https://developer.android.com/tools/support-library/features.html
    // In general, we recommend including the v4 support and v7 appcompat
    // libraries, because they support a wide range of Android versions and
    // provide APIs for recommended user interface patterns.

    compile "com.android.support:support-v4:21.0.+"
    compile 'com.android.support:appcompat-v7:19.1.0'

    compile('org.simpleframework:simple-xml:2.7.1') {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'xpp3', module: 'xpp3'
    }

    compile "joda-time:joda-time:2.2"

    // Acralyzer crash reports
    compile('ch.acra:acra:4.5.0') {
        exclude group: 'org.json'
    }

    // osmdroid stuff
    compile "org.apache.httpcomponents:httpmime:4.0.1"
    compile "org.apache.james:apache-mime4j:0.6"
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:all', '-Werror', '-Xlint:-deprecation']
}

File signFile = rootProject.file('android/properties/signing.properties')
println "Signing file: " + signFile.getAbsolutePath()
if (signFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(signFile))

    android.signingConfigs.release.storeFile = rootProject.file(p.StoreFile)
    android.signingConfigs.release.storePassword = p.StorePassword
    android.signingConfigs.release.keyAlias = p.KeyAlias
    android.signingConfigs.release.keyPassword = p.KeyPassword
} else {
    println "No private.properties file was found.";
    android.buildTypes.release.signingConfig = null
}


String getMozillaApiKey(String scope) {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file("android/properties/private-"+scope+".properties")
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        def result = '"' + p['MozAPIKey'] + '"';
        println "Writing custom MozAPIKey: ["+result+"]";
        return result;
    }
    println "No "+signFile.getAbsolutePath()+" for Mozilla API Key configuration."
    return "null";
}

String getTileServerUrl(String scope) {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file("android/properties/private-"+scope+".properties")
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))

        if (p['TileServerURL']) {
            def result = '"' + p['TileServerURL'] + '"';
            println "Using custom TileServerURL: ["+result+"]";
            return result;
        } else if (p['MapAPIKey']) {
            def result = "\"http://api.tiles.mapbox.com/v3/${p['MapAPIKey']}/\"";
            println "Using MapAPIKey: ["+result+"]";
            return result;
        }
    }
    println "No "+signFile.getAbsolutePath()+" for TileServer configuration."
    return "null";
}


// Yay for apk basenames that you can only figure out by reading the
// gradle source.
project.archivesBaseName = "MozStumbler";
