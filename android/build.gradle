// each of the version numbers must be 0-99
def versionMajor = 0
def versionMinor = 40
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc...

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        // robolectric won't play nice with  the gradle build tools
        // for 0.11 or 0.12
        classpath 'com.android.tools.build:gradle:0.10.+'

        classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.10.+'

        // Gradle download task is from: https://github.com/michel-kraemer/gradle-download-task
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

apply plugin: 'android'
apply plugin: 'android-test'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

import de.undercouch.gradle.tasks.download.Download
import java.util.regex.Pattern

def libDir = new File("android/libs")
libDir.mkdirs()

task updateJars(type: Download) {
    src([
        'https://github.com/mozilla/osmdroid/releases/download/4.3pre0/osmdroid-android-4.3-SNAPSHOT.jar',
        'https://github.com/crankycoder/SimpleKML/releases/download/v1.0/SimpleKML.jar'
    ])
    dest libDir
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18

        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"

        // I'm so happy I have to compute the versionCode, versionName
        // and then duplicate it in the manifest.  yay android.
        writeVersionCode(versionCode)
        writeVersionName(versionName)

        buildConfigField "boolean", "ROBOLECTRIC", "false"
        buildConfigField "String", "MOZILLA_API_KEY", getMozillaApiKey()
        buildConfigField "String", "TILE_SERVER_URL", getTileServerUrl()

        // Crash report settings
        buildConfigField "String", "ACRA_URI", getAcraURI()
        buildConfigField "String", "ACRA_USER", getAcraUser()
        buildConfigField "String", "ACRA_PASS", getAcraPass()

    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            jniDebugBuild true
        }

        release {
            runProguard true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }

        unittest.initWith(buildTypes.debug)
        unittest {
            buildConfigField "boolean", "ROBOLECTRIC", "true"
        }

        applicationVariants.all { variant ->
            variant.processManifest.doLast {
                println("configuring AndroidManifest.xml");
                copy {
                    from("${buildDir}/intermediates/manifests") {
                        include "${variant.dirName}/AndroidManifest.xml"
                    }
                    into("${buildDir}/intermediates/filtered_manifests")
                }

                def manifestFile = new File("${buildDir}/intermediates/filtered_manifests/${variant.dirName}/AndroidManifest.xml")
                    def content = manifestFile.getText()
                    def updatedContent = content.replaceAll("FAKE_MAPBOX_MAPID", getMapboxAPIKey())
                    manifestFile.write(updatedContent)
            }

            // This is a bit confusing, we want to swap in the
            // filtered AndroidManifest.xml file so that we don't
            // modify the original AndroidManifest.xml. This prevents
            // accidental commit of the mapbox key into source
            // control.
            variant.processResources.manifestFile = new File("${buildDir}/intermediates/filtered_manifests/${variant.dirName}/AndroidManifest.xml")
        }
    }

    sourceSets {
        androidTest.setRoot('src/test')
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }

}

dependencies {
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3'

    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.3'

    // pickup osmdroid and simplekml
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'org.slf4j:slf4j-android:1.7.7'

    compile 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'

    // https://developer.android.com/tools/support-library/features.html
    // In general, we recommend including the v4 support and v7 appcompat
    // libraries, because they support a wide range of Android versions and
    // provide APIs for recommended user interface patterns.

    compile "com.android.support:support-v4:19.1.+"
    compile 'com.android.support:appcompat-v7:19.1.0'

    compile('org.simpleframework:simple-xml:2.7.1') {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'xpp3', module: 'xpp3'
    }

    compile "joda-time:joda-time:2.2"

    // Acralyzer crash reports
    compile 'ch.acra:acra:4.5.0'
}

FileTree getJacocoClassDirs(List projects) {
    def classDirs = fileTree(
            dir: "${buildDir}/classes/debug",
            excludes: ['**/R*.class', '**/BuildConfig.class']
    )

    projects.each {
        def projectBuildDir = project(it).buildDir
        classDirs += fileTree(
                dir: "${projectBuildDir}/classes/release",
                excludes: ['**/R*.class', '**/BuildConfig.class']
        )
    }

    return classDirs
}

FileCollection getJacocoSrcFiles(List projects) {
    Set srcFiles = android.sourceSets.main.java.srcDirs

    projects.each {
        def projectDir = project(it).projectDir
        srcFiles.add("${projectDir}/src/main/java")
    }

    return files(srcFiles)
}

FileCollection getJacocoExecFiles(List projects) {
    Set execFiles = new HashSet();
    execFiles.add("${buildDir}/jacoco/testDebug.exec")

    projects.each {
        def projectBuildDir = project(it).buildDir
        execFiles.add("${projectBuildDir}/jacoco/testDebug.exec")
    }

    return files(execFiles)
}

task jacocoTestReport(type: JacocoReport, dependsOn: test) {
    description 'Generate code coverage.'
    group 'Verification'

    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }

    def dependencies = []

    classDirectories = getJacocoClassDirs(dependencies)
    sourceDirectories = getJacocoSrcFiles(dependencies)
    executionData = getJacocoExecFiles(dependencies)
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:all', '-Werror', '-Xlint:-deprecation']
}


File signFile = rootProject.file('private.properties')
if (signFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(signFile))

    android.signingConfigs.release.storeFile = rootProject.file(p.StoreFile)
    android.signingConfigs.release.storePassword = p.StorePassword
    android.signingConfigs.release.keyAlias = p.KeyAlias
    android.signingConfigs.release.keyPassword = p.KeyPassword
} else {
    println "No private.properties file was found.";
    android.buildTypes.release.signingConfig = null
}

String getAcraURI() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_URI'] == null) {
            return '""';
        }
        return '"' + p['ACRA_URI'] + '"'
    }
    return '""';
}

String getAcraUser() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_USER'] == null) {
            return '""';
        }
        return '"' + p['ACRA_USER'] + '"'
    }
    return '""';
}

String getAcraPass() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_PASS'] == null) {
            return '""';
        }
        return '"' + p['ACRA_PASS'] + '"'
    }
    return '""';
}


String getMozillaApiKey() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        def result = '"' + p['MozAPIKey'] + '"';
        println "Writing custom MozAPIKey: ["+result+"]";
        return result;
    }
    println "No private.properties for Mozilla API Key configuration.."
    return "null";
}

String getMapboxAPIKey() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))

        if (p['MapAPIKey'] != null) {
            return p['MapAPIKey'];
        }
    }
    return '';
}

String getTileServerUrl() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))

        if (p['TileServerURL']) {
            def result = '"' + p['TileServerURL'] + '"';
            println "Using custom TileServerURL: ["+result+"]";
            return result;
        } else if (p['MapAPIKey']) {
            def result = "\"http://api.tiles.mapbox.com/v3/${p['MapAPIKey']}/\"";
            println "Using MapAPIKey: ["+result+"]";
            return result;
        }
    }
    println "No private.properties for TileServer configuration."
    return "null";
}


void writeVersionCode(int versionCode) {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def manifestContent = matcher.replaceAll("versionCode=\"" + versionCode + "\"")
    manifestFile.write(manifestContent)
}

void writeVersionName(String versionName) {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"[^\"]*\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + versionName + "\"")
    manifestFile.write(manifestContent)

    def versionFile = file("../VERSION")
    versionFile.write(versionName)
}

// Yay for apk basenames that you can only figure out by reading the
// gradle source.
project.archivesBaseName = "MozStumbler";
