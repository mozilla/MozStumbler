def buildCode = file("../version-code.sh").toString().execute().text.trim().toInteger()
def buildName = file("../version-name.sh").toString().execute().text.trim()

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'

        classpath 'org.robolectric:robolectric-gradle-plugin:0.12.+'

        // Gradle download task is from: https://github.com/michel-kraemer/gradle-download-task
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'robolectric'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    ivy {
        url 'http://mozilla-services.github.io/ivy-repo' 
    }
}

import de.undercouch.gradle.tasks.download.Download
import java.util.regex.Pattern

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18

        versionCode buildCode
        versionName buildName

        // I'm so happy I have to compute the versionCode, versionName
        // and then duplicate it in the manifest.  yay android.
        writeVersionCode(versionCode)
        writeVersionName(versionName)

        buildConfigField "boolean", "ROBOLECTRIC", "false"
        buildConfigField "String", "MOZILLA_API_KEY", getMozillaApiKey()
        buildConfigField "String", "TILE_SERVER_URL", getTileServerUrl()

        buildConfigField "boolean", "LABEL_MAP_TILES", "false"

        buildConfigField "boolean", "GITHUB", "false"
        buildConfigField "boolean", "PLAYSTORE", "false"

        // Crash report settings
        buildConfigField "String", "ACRA_URI", getAcraURI()
        buildConfigField "String", "ACRA_USER", getAcraUser()
        buildConfigField "String", "ACRA_PASS", getAcraPass()

    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            jniDebugBuild true

            // set this to false if you want your debug builds to have
            // standard unlabelled tiles.
            buildConfigField "boolean", "LABEL_MAP_TILES", "false"

        }

        release {
            runProguard true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }

        github.initWith(buildTypes.release)
        github {
            buildConfigField "boolean", "GITHUB", "true"
        }

        playstore.initWith(buildTypes.release)
        playstore {
            buildConfigField "boolean", "PLAYSTORE", "true"
        }

        unittest.initWith(buildTypes.debug)
        unittest {
            buildConfigField "boolean", "ROBOLECTRIC", "true"
        }
    }

    sourceSets {
        androidTest.setRoot('src/test')
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }

}

dependencies {
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3'

    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.3'

    compile 'com.crankycoder:SimpleKML:1.0'

    compile 'org.slf4j:slf4j-android:1.7.7'

    compile 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'

    // https://developer.android.com/tools/support-library/features.html
    // In general, we recommend including the v4 support and v7 appcompat
    // libraries, because they support a wide range of Android versions and
    // provide APIs for recommended user interface patterns.

    compile "com.android.support:support-v4:19.1.+"
    compile 'com.android.support:appcompat-v7:19.1.0'

    compile('org.simpleframework:simple-xml:2.7.1') {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'xpp3', module: 'xpp3'
    }

    compile "joda-time:joda-time:2.2"

    // Acralyzer crash reports
    compile 'ch.acra:acra:4.5.0'

    // osmdroid stuff
    compile "org.apache.httpcomponents:httpmime:4.0.1"
    compile "org.apache.james:apache-mime4j:0.6"
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:all', '-Werror', '-Xlint:-deprecation']
}


File signFile = rootProject.file('private.properties')
if (signFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(signFile))

    android.signingConfigs.release.storeFile = rootProject.file(p.StoreFile)
    android.signingConfigs.release.storePassword = p.StorePassword
    android.signingConfigs.release.keyAlias = p.KeyAlias
    android.signingConfigs.release.keyPassword = p.KeyPassword
} else {
    println "No private.properties file was found.";
    android.buildTypes.release.signingConfig = null
}

String getAcraURI() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_URI'] == null) {
            return '""';
        }
        return '"' + p['ACRA_URI'] + '"'
    }
    return '""';
}

String getAcraUser() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_USER'] == null) {
            return '""';
        }
        return '"' + p['ACRA_USER'] + '"'
    }
    return '""';
}

String getAcraPass() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        if (p['ACRA_PASS'] == null) {
            return '""';
        }
        return '"' + p['ACRA_PASS'] + '"'
    }
    return '""';
}


String getMozillaApiKey() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))
        def result = '"' + p['MozAPIKey'] + '"';
        println "Writing custom MozAPIKey: ["+result+"]";
        return result;
    }
    println "No private.properties for Mozilla API Key configuration.."
    return "null";
}

String getTileServerUrl() {
    // Yeah, this is lame, opening the file again.  Sosume.
    File signFile = rootProject.file('private.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))

        if (p['TileServerURL']) {
            def result = '"' + p['TileServerURL'] + '"';
            println "Using custom TileServerURL: ["+result+"]";
            return result;
        } else if (p['MapAPIKey']) {
            def result = "\"http://api.tiles.mapbox.com/v3/${p['MapAPIKey']}/\"";
            println "Using MapAPIKey: ["+result+"]";
            return result;
        }
    }
    println "No private.properties for TileServer configuration."
    return "null";
}


void writeVersionCode(int versionCode) {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def manifestContent = matcher.replaceAll("versionCode=\"" + versionCode + "\"")
    manifestFile.write(manifestContent)
}

void writeVersionName(String versionName) {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"[^\"]*\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + versionName + "\"")
    manifestFile.write(manifestContent)

    def versionFile = file("../VERSION")
    versionFile.write(versionName)
}

// Yay for apk basenames that you can only figure out by reading the
// gradle source.
project.archivesBaseName = "MozStumbler";
